// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package client

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SupplyChainContractBuyer is an auto generated low-level Go binding around an user-defined struct.
type SupplyChainContractBuyer struct {
	BuyerId     string
	Name        string
	Uid         string
	Pan         string
	Tan         string
	BankAccount string
	IsActive    bool
}

// SupplyChainContractSales is an auto generated low-level Go binding around an user-defined struct.
type SupplyChainContractSales struct {
	InvoiceId     string
	Item          string
	Unit          string
	Amount        *big.Int
	AmountPerUnit *big.Int
	SalesDate     *big.Int
	BeneficiaryId string
	BuyerId       string
	Status        string
	IsValid       bool
}

// SupplyChainContractSeller is an auto generated low-level Go binding around an user-defined struct.
type SupplyChainContractSeller struct {
	SellerId    string
	Name        string
	Uid         string
	Pan         string
	BankAccount string
	IsActive    bool
}

// ClientABI is the input ABI used to generate the binding from.
const ClientABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"BuyerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"approvedBy\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"}],\"name\":\"InvoiceApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sellerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"}],\"name\":\"ItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"}],\"name\":\"SellerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"}],\"name\":\"approveByBuyer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sellerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"}],\"name\":\"approveBySeller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sellerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"}],\"name\":\"createInvoice\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"}],\"name\":\"getBuyer\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pan\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tan\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"structSupplyChainContract.Buyer\",\"name\":\"buyer\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"}],\"name\":\"getSalesDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"invoiceId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"item\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"unit\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountPerUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"beneficiaryId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"internalType\":\"structSupplyChainContract.Sales\",\"name\":\"sales\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sellerId\",\"type\":\"string\"}],\"name\":\"getSeller\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"sellerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pan\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"internalType\":\"structSupplyChainContract.Seller\",\"name\":\"seller\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"buyerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pan\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tan\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"}],\"name\":\"registerBuyer\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"bId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"sellerId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pan\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bankAccount\",\"type\":\"string\"}],\"name\":\"registerSeller\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sId\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ClientBin is the compiled bytecode used for deploying new contracts.
var ClientBin = "0x608060405234801561001057600080fd5b50613f22806100206000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637e8555ed116100ad578063a217fddf11610071578063a217fddf146103a3578063a3902940146103c1578063ca15c873146103f1578063d547741f14610421578063e1c7392a1461043d5761012c565b80637e8555ed146102b35780638130e8ed146102e35780638ffd2411146103135780639010d07c1461034357806391d14854146103735761012c565b806330be8365116100f457806330be83651461020d57806336568abe1461023d5780635c975abb146102595780635e01eb5a1461027757806375b238fc146102955761012c565b80631378ded01461013157806320f64aa614610161578063248a9ca3146101915780632c2339d3146101c15780632f2ff15d146101f1575b600080fd5b61014b60048036038101906101469190612fd3565b610447565b6040516101589190613a42565b60405180910390f35b61017b60048036038101906101769190612d1e565b6107c2565b6040516101889190613d12565b60405180910390f35b6101ab60048036038101906101a69190612c7d565b610c50565b6040516101b89190613a27565b60405180910390f35b6101db60048036038101906101d69190612d5f565b610c70565b6040516101e89190613a0c565b60405180910390f35b61020b60048036038101906102069190612ca6565b610e97565b005b61022760048036038101906102229190612d1e565b610f0b565b6040516102349190613cf0565b60405180910390f35b61025760048036038101906102529190612ca6565b61137d565b005b610261611400565b60405161026e9190613a0c565b60405180910390f35b61027f611417565b60405161028c91906139f1565b60405180910390f35b61029d61141f565b6040516102aa9190613a27565b60405180910390f35b6102cd60048036038101906102c89190612dcb565b611436565b6040516102da9190613a42565b60405180910390f35b6102fd60048036038101906102f89190612d5f565b6117b2565b60405161030a9190613a0c565b60405180910390f35b61032d60048036038101906103289190612eba565b6119d9565b60405161033a9190613a42565b60405180910390f35b61035d60048036038101906103589190612ce2565b611dbe565b60405161036a91906139f1565b60405180910390f35b61038d60048036038101906103889190612ca6565b611df0565b60405161039a9190613a0c565b60405180910390f35b6103ab611e22565b6040516103b89190613a27565b60405180910390f35b6103db60048036038101906103d69190612d1e565b611e29565b6040516103e89190613d34565b60405180910390f35b61040b60048036038101906104069190612c7d565b6121f9565b6040516104189190613d56565b60405180910390f35b61043b60048036038101906104369190612ca6565b612220565b005b610445612294565b005b6060609760009054906101000a900460ff1615610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090613bf0565b60405180910390fd5b60cb826040516104a991906139c5565b908152602001604051809103902060060160009054906101000a900460ff16610507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fe90613c70565b60405180910390fd5b60ca8360405161051791906139c5565b908152602001604051809103902060050160009054906101000a900460ff16610575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056c90613c90565b60405180910390fd5b879050610580612a79565b6040518061014001604052808381526020018981526020018881526020018781526020018681526020014281526020018581526020018481526020016040518060400160405280601281526020017f436f6e63696c6174696f6e50656e64696e67000000000000000000000000000081525081526020016001151581525090508060cc8360405161061191906139c5565b9081526020016040518091039020600082015181600001908051906020019061063b929190612ace565b506020820151816001019080519060200190610658929190612ace565b506040820151816002019080519060200190610675929190612ace565b50606082015181600301556080820151816004015560a0820151816005015560c08201518160060190805190602001906106b0929190612ace565b5060e08201518160070190805190602001906106cd929190612ace565b506101008201518160080190805190602001906106eb929190612ace565b506101208201518160090160006101000a81548160ff0219169083151502179055509050506040518060400160405280601281526020017f436f6e63696c6174696f6e50656e64696e67000000000000000000000000000081525060cf8360405161075691906139c5565b90815260200160405180910390209080519060200190610777929190612ace565b507fc18e13caa82804b8ecce2d9483f0afc4bb7a3cb524beb949ad7f67951c61317d8484846040516107ab93929190613a64565b60405180910390a181915050979650505050505050565b6107ca612a79565b609760009054906101000a900460ff161561081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190613bf0565b60405180910390fd5b60cc8260405161082a91906139c5565b908152602001604051809103902060405180610140016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108dd5780601f106108b2576101008083540402835291602001916108dd565b820191906000526020600020905b8154815290600101906020018083116108c057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561097f5780601f106109545761010080835404028352916020019161097f565b820191906000526020600020905b81548152906001019060200180831161096257829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a215780601f106109f657610100808354040283529160200191610a21565b820191906000526020600020905b815481529060010190602001808311610a0457829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201548152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ae15780601f10610ab657610100808354040283529160200191610ae1565b820191906000526020600020905b815481529060010190602001808311610ac457829003601f168201915b50505050508152602001600782018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b835780601f10610b5857610100808354040283529160200191610b83565b820191906000526020600020905b815481529060010190602001808311610b6657829003601f168201915b50505050508152602001600882018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c255780601f10610bfa57610100808354040283529160200191610c25565b820191906000526020600020905b815481529060010190602001808311610c0857829003601f168201915b505050505081526020016009820160009054906101000a900460ff1615151515815250509050919050565b600060656000838152602001908152602001600020600201549050919050565b6000609760009054906101000a900460ff1615610cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb990613bf0565b60405180910390fd5b60cb83604051610cd291906139c5565b908152602001604051809103902060060160009054906101000a900460ff16610d30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2790613b90565b60405180910390fd5b60cc82604051610d4091906139c5565b908152602001604051809103902060090160009054906101000a900460ff16610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9590613c10565b60405180910390fd5b6040518060400160405280600d81526020017f4275796572417070726f7665640000000000000000000000000000000000000081525060ce84604051610de491906139c5565b908152602001604051809103902083604051610e0091906139c5565b90815260200160405180910390209080519060200190610e21929190612ace565b506040518060400160405280600d81526020017f4275796572417070726f7665640000000000000000000000000000000000000081525060cc83604051610e6891906139c5565b90815260200160405180910390206008019080519060200190610e8c929190612ace565b506001905092915050565b610ebe6065600084815260200190815260200160002060020154610eb96123a1565b611df0565b610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef490613af0565b60405180910390fd5b610f0782826123a9565b5050565b610f13612b4e565b609760009054906101000a900460ff1615610f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5a90613bf0565b60405180910390fd5b60cb82604051610f7391906139c5565b90815260200160405180910390206040518060e0016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110255780601f10610ffa57610100808354040283529160200191611025565b820191906000526020600020905b81548152906001019060200180831161100857829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111695780601f1061113e57610100808354040283529160200191611169565b820191906000526020600020905b81548152906001019060200180831161114c57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561120b5780601f106111e05761010080835404028352916020019161120b565b820191906000526020600020905b8154815290600101906020018083116111ee57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156112ad5780601f10611282576101008083540402835291602001916112ad565b820191906000526020600020905b81548152906001019060200180831161129057829003601f168201915b50505050508152602001600582018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561134f5780601f106113245761010080835404028352916020019161134f565b820191906000526020600020905b81548152906001019060200180831161133257829003601f168201915b505050505081526020016006820160009054906101000a900460ff1615151515815250509050809050919050565b6113856123a1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e990613cd0565b60405180910390fd5b6113fc828261243d565b5050565b6000609760009054906101000a900460ff16905090565b600033905090565b60405161142b906139dc565b604051809103902081565b6060609760009054906101000a900460ff1615611488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147f90613bf0565b60405180910390fd5b61149c6000801b6114976123a1565b611df0565b6114db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d290613cb0565b60405180910390fd5b60ca866040516114eb91906139c5565b908152602001604051809103902060050160009054906101000a900460ff161561154a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154190613b70565b60405180910390fd5b60008651141561158f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158690613bb0565b60405180910390fd5b6000855114156115d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115cb90613b10565b60405180910390fd5b600083511415611619576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161090613ad0565b60405180910390fd5b60008251141561165e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165590613b50565b60405180910390fd5b859050611669612b8d565b6040518060c001604052808881526020018781526020018681526020018581526020018481526020016001151581525090508060ca886040516116ac91906139c5565b908152602001604051809103902060008201518160000190805190602001906116d6929190612ace565b5060208201518160010190805190602001906116f3929190612ace565b506040820151816002019080519060200190611710929190612ace565b50606082015181600301908051906020019061172d929190612ace565b50608082015181600401908051906020019061174a929190612ace565b5060a08201518160050160006101000a81548160ff0219169083151502179055509050507f27ef2ec2576aa5285afcdaa46aed87b61e647f2feaa83e71d202942014ede1fc8260405161179d9190613a42565b60405180910390a18191505095945050505050565b6000609760009054906101000a900460ff1615611804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fb90613bf0565b60405180910390fd5b60ca8360405161181491906139c5565b908152602001604051809103902060050160009054906101000a900460ff16611872576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186990613c90565b60405180910390fd5b60cc8260405161188291906139c5565b908152602001604051809103902060090160009054906101000a900460ff166118e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d790613c10565b60405180910390fd5b6040518060400160405280600b81526020017f42656e417070726f76656400000000000000000000000000000000000000000081525060cd8460405161192691906139c5565b90815260200160405180910390208360405161194291906139c5565b90815260200160405180910390209080519060200190611963929190612ace565b506040518060400160405280600b81526020017f42656e417070726f76656400000000000000000000000000000000000000000081525060cc836040516119aa91906139c5565b908152602001604051809103902060080190805190602001906119ce929190612ace565b506001905092915050565b6060609760009054906101000a900460ff1615611a2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2290613bf0565b60405180910390fd5b611a3f6000801b611a3a6123a1565b611df0565b611a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7590613cb0565b60405180910390fd5b60cb87604051611a8e91906139c5565b908152602001604051809103902060060160009054906101000a900460ff1615611aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae490613c30565b60405180910390fd5b600087511415611b32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2990613bb0565b60405180910390fd5b600086511415611b77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6e90613b10565b60405180910390fd5b600084511415611bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb390613ad0565b60405180910390fd5b600083511415611c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf890613b30565b60405180910390fd5b600082511415611c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3d90613b50565b60405180910390fd5b869050611c51612b4e565b6040518060e001604052808981526020018881526020018781526020018681526020018581526020018481526020016001151581525090508060cb89604051611c9a91906139c5565b90815260200160405180910390206000820151816000019080519060200190611cc4929190612ace565b506020820151816001019080519060200190611ce1929190612ace565b506040820151816002019080519060200190611cfe929190612ace565b506060820151816003019080519060200190611d1b929190612ace565b506080820151816004019080519060200190611d38929190612ace565b5060a0820151816005019080519060200190611d55929190612ace565b5060c08201518160060160006101000a81548160ff0219169083151502179055509050507fa02f3df0d0f1c777036d971f90f2b342e5f8879472d31d1e8affe7af7e70e5e688604051611da89190613a42565b60405180910390a1879150509695505050505050565b6000611de882606560008681526020019081526020016000206000016124d190919063ffffffff16565b905092915050565b6000611e1a82606560008681526020019081526020016000206000016124eb90919063ffffffff16565b905092915050565b6000801b81565b611e31612b8d565b609760009054906101000a900460ff1615611e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7890613bf0565b60405180910390fd5b60ca82604051611e9191906139c5565b90815260200160405180910390206040518060c0016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f435780601f10611f1857610100808354040283529160200191611f43565b820191906000526020600020905b815481529060010190602001808311611f2657829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611fe55780601f10611fba57610100808354040283529160200191611fe5565b820191906000526020600020905b815481529060010190602001808311611fc857829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120875780601f1061205c57610100808354040283529160200191612087565b820191906000526020600020905b81548152906001019060200180831161206a57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121295780601f106120fe57610100808354040283529160200191612129565b820191906000526020600020905b81548152906001019060200180831161210c57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156121cb5780601f106121a0576101008083540402835291602001916121cb565b820191906000526020600020905b8154815290600101906020018083116121ae57829003601f168201915b505050505081526020016005820160009054906101000a900460ff1615151515815250509050809050919050565b60006122196065600084815260200190815260200160002060000161251b565b9050919050565b61224760656000848152602001908152602001600020600201546122426123a1565b611df0565b612286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227d90613bd0565b60405180910390fd5b612290828261243d565b5050565b600060019054906101000a900460ff16806122b357506122b2612530565b5b806122ca57506000809054906101000a900460ff16155b612309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230090613c50565b60405180910390fd5b60008060019054906101000a900460ff161590508015612359576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612361612547565b6123756000801b6123706123a1565b612640565b600060c981905550801561239e5760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6123d1816065600085815260200190815260200160002060000161264e90919063ffffffff16565b15612439576123de6123a1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b612465816065600085815260200190815260200160002060000161267e90919063ffffffff16565b156124cd576124726123a1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b60006124e083600001836126ae565b60001c905092915050565b6000612513836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61271b565b905092915050565b60006125298260000161273e565b9050919050565b6000803090506000813b9050600081149250505090565b600060019054906101000a900460ff16806125665750612565612530565b5b8061257d57506000809054906101000a900460ff16155b6125bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b390613c50565b60405180910390fd5b60008060019054906101000a900460ff16159050801561260c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61261461274f565b61261c612838565b801561263d5760008060016101000a81548160ff0219169083151502179055505b50565b61264a82826123a9565b5050565b6000612676836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612921565b905092915050565b60006126a6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612991565b905092915050565b6000818360000180549050116126f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126f090613ab0565b60405180910390fd5b82600001828154811061270857fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b600081600001805490509050919050565b600060019054906101000a900460ff168061276e575061276d612530565b5b8061278557506000809054906101000a900460ff16155b6127c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bb90613c50565b60405180910390fd5b60008060019054906101000a900460ff161590508015612814576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156128355760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806128575750612856612530565b5b8061286e57506000809054906101000a900460ff16155b6128ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a490613c50565b60405180910390fd5b60008060019054906101000a900460ff1615905080156128fd576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561291e5760008060016101000a81548160ff0219169083151502179055505b50565b600061292d838361271b565b61298657826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061298b565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612a6d57600060018203905060006001866000018054905003905060008660000182815481106129dc57fe5b90600052602060002001549050808760000184815481106129f957fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480612a3157fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612a73565b60009150505b92915050565b6040518061014001604052806060815260200160608152602001606081526020016000815260200160008152602001600081526020016060815260200160608152602001606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612b0f57805160ff1916838001178555612b3d565b82800160010185558215612b3d579182015b82811115612b3c578251825591602001919060010190612b21565b5b509050612b4a9190612bc5565b5090565b6040518060e001604052806060815260200160608152602001606081526020016060815260200160608152602001606081526020016000151581525090565b6040518060c0016040528060608152602001606081526020016060815260200160608152602001606081526020016000151581525090565b612be791905b80821115612be3576000816000905550600101612bcb565b5090565b90565b600081359050612bf981613ea7565b92915050565b600081359050612c0e81613ebe565b92915050565b600082601f830112612c2557600080fd5b8135612c38612c3382613d9e565b613d71565b91508082526020830160208301858383011115612c5457600080fd5b612c5f838284613e54565b50505092915050565b600081359050612c7781613ed5565b92915050565b600060208284031215612c8f57600080fd5b6000612c9d84828501612bff565b91505092915050565b60008060408385031215612cb957600080fd5b6000612cc785828601612bff565b9250506020612cd885828601612bea565b9150509250929050565b60008060408385031215612cf557600080fd5b6000612d0385828601612bff565b9250506020612d1485828601612c68565b9150509250929050565b600060208284031215612d3057600080fd5b600082013567ffffffffffffffff811115612d4a57600080fd5b612d5684828501612c14565b91505092915050565b60008060408385031215612d7257600080fd5b600083013567ffffffffffffffff811115612d8c57600080fd5b612d9885828601612c14565b925050602083013567ffffffffffffffff811115612db557600080fd5b612dc185828601612c14565b9150509250929050565b600080600080600060a08688031215612de357600080fd5b600086013567ffffffffffffffff811115612dfd57600080fd5b612e0988828901612c14565b955050602086013567ffffffffffffffff811115612e2657600080fd5b612e3288828901612c14565b945050604086013567ffffffffffffffff811115612e4f57600080fd5b612e5b88828901612c14565b935050606086013567ffffffffffffffff811115612e7857600080fd5b612e8488828901612c14565b925050608086013567ffffffffffffffff811115612ea157600080fd5b612ead88828901612c14565b9150509295509295909350565b60008060008060008060c08789031215612ed357600080fd5b600087013567ffffffffffffffff811115612eed57600080fd5b612ef989828a01612c14565b965050602087013567ffffffffffffffff811115612f1657600080fd5b612f2289828a01612c14565b955050604087013567ffffffffffffffff811115612f3f57600080fd5b612f4b89828a01612c14565b945050606087013567ffffffffffffffff811115612f6857600080fd5b612f7489828a01612c14565b935050608087013567ffffffffffffffff811115612f9157600080fd5b612f9d89828a01612c14565b92505060a087013567ffffffffffffffff811115612fba57600080fd5b612fc689828a01612c14565b9150509295509295509295565b600080600080600080600060e0888a031215612fee57600080fd5b600088013567ffffffffffffffff81111561300857600080fd5b6130148a828b01612c14565b975050602088013567ffffffffffffffff81111561303157600080fd5b61303d8a828b01612c14565b965050604088013567ffffffffffffffff81111561305a57600080fd5b6130668a828b01612c14565b95505060606130778a828b01612c68565b94505060806130888a828b01612c68565b93505060a088013567ffffffffffffffff8111156130a557600080fd5b6130b18a828b01612c14565b92505060c088013567ffffffffffffffff8111156130ce57600080fd5b6130da8a828b01612c14565b91505092959891949750929550565b6130f281613e02565b82525050565b61310181613e14565b82525050565b61311081613e14565b82525050565b61311f81613e20565b82525050565b600061313082613dca565b61313a8185613dd5565b935061314a818560208601613e63565b61315381613e96565b840191505092915050565b600061316982613dca565b6131738185613de6565b9350613183818560208601613e63565b61318c81613e96565b840191505092915050565b60006131a282613dca565b6131ac8185613df7565b93506131bc818560208601613e63565b80840191505092915050565b60006131d5602283613de6565b91507f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008301527f64730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061323b601383613de6565b91507f50616e2063616e6e6f7420626520656d707479000000000000000000000000006000830152602082019050919050565b600061327b602f83613de6565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f206772616e7400000000000000000000000000000000006020830152604082019050919050565b60006132e1601483613de6565b91507f4e616d652063616e6e6f7420626520656d7074790000000000000000000000006000830152602082019050919050565b6000613321601383613de6565b91507f54616e2063616e6e6f7420626520656d707479000000000000000000000000006000830152602082019050919050565b6000613361601b83613de6565b91507f42616e6b4163636f756e742063616e6e6f7420626520656d70747900000000006000830152602082019050919050565b60006133a1601583613de6565b91507f53656c6c657220616c72656164792065786973747300000000000000000000006000830152602082019050919050565b60006133e1601683613de6565b91507f427579657220646f6573206e6f742020657869737473000000000000000000006000830152602082019050919050565b6000613421601283613de6565b91507f49642063616e6e6f7420626520656d70747900000000000000000000000000006000830152602082019050919050565b6000613461603083613de6565b91507f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60008301527f2061646d696e20746f207265766f6b65000000000000000000000000000000006020830152604082019050919050565b60006134c7601083613de6565b91507f5061757361626c653a20706175736564000000000000000000000000000000006000830152602082019050919050565b6000613507601383613de6565b91507f496e766f6963654964206e6f742076616c6964000000000000000000000000006000830152602082019050919050565b6000613547601483613de6565b91507f427579657220616c7265616479206578697374730000000000000000000000006000830152602082019050919050565b6000613587602e83613de6565b91507f436f6e747261637420696e7374616e63652068617320616c726561647920626560008301527f656e20696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006135ed600a83613df7565b91507f41444d494e5f524f4c45000000000000000000000000000000000000000000006000830152600a82019050919050565b600061362d601483613de6565b91507f427579657220646f6573206e6f742065786973740000000000000000000000006000830152602082019050919050565b600061366d601783613de6565b91507f53656c6c657220646f6573206e6f7420206578697374730000000000000000006000830152602082019050919050565b60006136ad601a83613de6565b91507f4f6e6c7920616e2061646d696e2063616e2072656769737465720000000000006000830152602082019050919050565b60006136ed602f83613de6565b91507f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008301527f20726f6c657320666f722073656c6600000000000000000000000000000000006020830152604082019050919050565b600060e08301600083015184820360008601526137638282613125565b9150506020830151848203602086015261377d8282613125565b915050604083015184820360408601526137978282613125565b915050606083015184820360608601526137b18282613125565b915050608083015184820360808601526137cb8282613125565b91505060a083015184820360a08601526137e58282613125565b91505060c08301516137fa60c08601826130f8565b508091505092915050565b60006101408301600083015184820360008601526138238282613125565b9150506020830151848203602086015261383d8282613125565b915050604083015184820360408601526138578282613125565b915050606083015161386c60608601826139a7565b50608083015161387f60808601826139a7565b5060a083015161389260a08601826139a7565b5060c083015184820360c08601526138aa8282613125565b91505060e083015184820360e08601526138c48282613125565b9150506101008301518482036101008601526138e08282613125565b9150506101208301516138f76101208601826130f8565b508091505092915050565b600060c083016000830151848203600086015261391f8282613125565b915050602083015184820360208601526139398282613125565b915050604083015184820360408601526139538282613125565b9150506060830151848203606086015261396d8282613125565b915050608083015184820360808601526139878282613125565b91505060a083015161399c60a08601826130f8565b508091505092915050565b6139b081613e4a565b82525050565b6139bf81613e4a565b82525050565b60006139d18284613197565b915081905092915050565b60006139e7826135e0565b9150819050919050565b6000602082019050613a0660008301846130e9565b92915050565b6000602082019050613a216000830184613107565b92915050565b6000602082019050613a3c6000830184613116565b92915050565b60006020820190508181036000830152613a5c818461315e565b905092915050565b60006060820190508181036000830152613a7e818661315e565b90508181036020830152613a92818561315e565b90508181036040830152613aa6818461315e565b9050949350505050565b60006020820190508181036000830152613ac9816131c8565b9050919050565b60006020820190508181036000830152613ae98161322e565b9050919050565b60006020820190508181036000830152613b098161326e565b9050919050565b60006020820190508181036000830152613b29816132d4565b9050919050565b60006020820190508181036000830152613b4981613314565b9050919050565b60006020820190508181036000830152613b6981613354565b9050919050565b60006020820190508181036000830152613b8981613394565b9050919050565b60006020820190508181036000830152613ba9816133d4565b9050919050565b60006020820190508181036000830152613bc981613414565b9050919050565b60006020820190508181036000830152613be981613454565b9050919050565b60006020820190508181036000830152613c09816134ba565b9050919050565b60006020820190508181036000830152613c29816134fa565b9050919050565b60006020820190508181036000830152613c498161353a565b9050919050565b60006020820190508181036000830152613c698161357a565b9050919050565b60006020820190508181036000830152613c8981613620565b9050919050565b60006020820190508181036000830152613ca981613660565b9050919050565b60006020820190508181036000830152613cc9816136a0565b9050919050565b60006020820190508181036000830152613ce9816136e0565b9050919050565b60006020820190508181036000830152613d0a8184613746565b905092915050565b60006020820190508181036000830152613d2c8184613805565b905092915050565b60006020820190508181036000830152613d4e8184613902565b905092915050565b6000602082019050613d6b60008301846139b6565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613d9457600080fd5b8060405250919050565b600067ffffffffffffffff821115613db557600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613e0d82613e2a565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613e81578082015181840152602081019050613e66565b83811115613e90576000848401525b50505050565b6000601f19601f8301169050919050565b613eb081613e02565b8114613ebb57600080fd5b50565b613ec781613e20565b8114613ed257600080fd5b50565b613ede81613e4a565b8114613ee957600080fd5b5056fea2646970667358221220aadfb8d34bd3335258da418078eca31d203d07b8959e15ba9da8723058d704da64736f6c634300060a0033"

// DeployClient deploys a new Ethereum contract, binding an instance of Client to it.
func DeployClient(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Client, error) {
	parsed, err := abi.JSON(strings.NewReader(ClientABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ClientBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Client{ClientCaller: ClientCaller{contract: contract}, ClientTransactor: ClientTransactor{contract: contract}, ClientFilterer: ClientFilterer{contract: contract}}, nil
}

// Client is an auto generated Go binding around an Ethereum contract.
type Client struct {
	ClientCaller     // Read-only binding to the contract
	ClientTransactor // Write-only binding to the contract
	ClientFilterer   // Log filterer for contract events
}

// ClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type ClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ClientSession struct {
	Contract     *Client           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ClientCallerSession struct {
	Contract *ClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ClientTransactorSession struct {
	Contract     *ClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type ClientRaw struct {
	Contract *Client // Generic contract binding to access the raw methods on
}

// ClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ClientCallerRaw struct {
	Contract *ClientCaller // Generic read-only contract binding to access the raw methods on
}

// ClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ClientTransactorRaw struct {
	Contract *ClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewClient creates a new instance of Client, bound to a specific deployed contract.
func NewClient(address common.Address, backend bind.ContractBackend) (*Client, error) {
	contract, err := bindClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Client{ClientCaller: ClientCaller{contract: contract}, ClientTransactor: ClientTransactor{contract: contract}, ClientFilterer: ClientFilterer{contract: contract}}, nil
}

// NewClientCaller creates a new read-only instance of Client, bound to a specific deployed contract.
func NewClientCaller(address common.Address, caller bind.ContractCaller) (*ClientCaller, error) {
	contract, err := bindClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ClientCaller{contract: contract}, nil
}

// NewClientTransactor creates a new write-only instance of Client, bound to a specific deployed contract.
func NewClientTransactor(address common.Address, transactor bind.ContractTransactor) (*ClientTransactor, error) {
	contract, err := bindClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ClientTransactor{contract: contract}, nil
}

// NewClientFilterer creates a new log filterer instance of Client, bound to a specific deployed contract.
func NewClientFilterer(address common.Address, filterer bind.ContractFilterer) (*ClientFilterer, error) {
	contract, err := bindClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ClientFilterer{contract: contract}, nil
}

// bindClient binds a generic wrapper to an already deployed contract.
func bindClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ClientABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Client *ClientRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Client.Contract.ClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Client *ClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Client.Contract.ClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Client *ClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Client.Contract.ClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Client *ClientCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Client.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Client *ClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Client.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Client *ClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Client.Contract.contract.Transact(opts, method, params...)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Client *ClientCaller) ADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "ADMIN_ROLE")
	return *ret0, err
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Client *ClientSession) ADMINROLE() ([32]byte, error) {
	return _Client.Contract.ADMINROLE(&_Client.CallOpts)
}

// ADMINROLE is a free data retrieval call binding the contract method 0x75b238fc.
//
// Solidity: function ADMIN_ROLE() view returns(bytes32)
func (_Client *ClientCallerSession) ADMINROLE() ([32]byte, error) {
	return _Client.Contract.ADMINROLE(&_Client.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Client *ClientCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "DEFAULT_ADMIN_ROLE")
	return *ret0, err
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Client *ClientSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Client.Contract.DEFAULTADMINROLE(&_Client.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_Client *ClientCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _Client.Contract.DEFAULTADMINROLE(&_Client.CallOpts)
}

// GetBuyer is a free data retrieval call binding the contract method 0x30be8365.
//
// Solidity: function getBuyer(string buyerId) view returns((string,string,string,string,string,string,bool) buyer)
func (_Client *ClientCaller) GetBuyer(opts *bind.CallOpts, buyerId string) (SupplyChainContractBuyer, error) {
	var (
		ret0 = new(SupplyChainContractBuyer)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getBuyer", buyerId)
	return *ret0, err
}

// GetBuyer is a free data retrieval call binding the contract method 0x30be8365.
//
// Solidity: function getBuyer(string buyerId) view returns((string,string,string,string,string,string,bool) buyer)
func (_Client *ClientSession) GetBuyer(buyerId string) (SupplyChainContractBuyer, error) {
	return _Client.Contract.GetBuyer(&_Client.CallOpts, buyerId)
}

// GetBuyer is a free data retrieval call binding the contract method 0x30be8365.
//
// Solidity: function getBuyer(string buyerId) view returns((string,string,string,string,string,string,bool) buyer)
func (_Client *ClientCallerSession) GetBuyer(buyerId string) (SupplyChainContractBuyer, error) {
	return _Client.Contract.GetBuyer(&_Client.CallOpts, buyerId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Client *ClientCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getRoleAdmin", role)
	return *ret0, err
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Client *ClientSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Client.Contract.GetRoleAdmin(&_Client.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_Client *ClientCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _Client.Contract.GetRoleAdmin(&_Client.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Client *ClientCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getRoleMember", role, index)
	return *ret0, err
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Client *ClientSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Client.Contract.GetRoleMember(&_Client.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_Client *ClientCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _Client.Contract.GetRoleMember(&_Client.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Client *ClientCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getRoleMemberCount", role)
	return *ret0, err
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Client *ClientSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Client.Contract.GetRoleMemberCount(&_Client.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_Client *ClientCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _Client.Contract.GetRoleMemberCount(&_Client.CallOpts, role)
}

// GetSalesDetails is a free data retrieval call binding the contract method 0x20f64aa6.
//
// Solidity: function getSalesDetails(string invoiceId) view returns((string,string,string,uint256,uint256,uint256,string,string,string,bool) sales)
func (_Client *ClientCaller) GetSalesDetails(opts *bind.CallOpts, invoiceId string) (SupplyChainContractSales, error) {
	var (
		ret0 = new(SupplyChainContractSales)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getSalesDetails", invoiceId)
	return *ret0, err
}

// GetSalesDetails is a free data retrieval call binding the contract method 0x20f64aa6.
//
// Solidity: function getSalesDetails(string invoiceId) view returns((string,string,string,uint256,uint256,uint256,string,string,string,bool) sales)
func (_Client *ClientSession) GetSalesDetails(invoiceId string) (SupplyChainContractSales, error) {
	return _Client.Contract.GetSalesDetails(&_Client.CallOpts, invoiceId)
}

// GetSalesDetails is a free data retrieval call binding the contract method 0x20f64aa6.
//
// Solidity: function getSalesDetails(string invoiceId) view returns((string,string,string,uint256,uint256,uint256,string,string,string,bool) sales)
func (_Client *ClientCallerSession) GetSalesDetails(invoiceId string) (SupplyChainContractSales, error) {
	return _Client.Contract.GetSalesDetails(&_Client.CallOpts, invoiceId)
}

// GetSeller is a free data retrieval call binding the contract method 0xa3902940.
//
// Solidity: function getSeller(string sellerId) view returns((string,string,string,string,string,bool) seller)
func (_Client *ClientCaller) GetSeller(opts *bind.CallOpts, sellerId string) (SupplyChainContractSeller, error) {
	var (
		ret0 = new(SupplyChainContractSeller)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getSeller", sellerId)
	return *ret0, err
}

// GetSeller is a free data retrieval call binding the contract method 0xa3902940.
//
// Solidity: function getSeller(string sellerId) view returns((string,string,string,string,string,bool) seller)
func (_Client *ClientSession) GetSeller(sellerId string) (SupplyChainContractSeller, error) {
	return _Client.Contract.GetSeller(&_Client.CallOpts, sellerId)
}

// GetSeller is a free data retrieval call binding the contract method 0xa3902940.
//
// Solidity: function getSeller(string sellerId) view returns((string,string,string,string,string,bool) seller)
func (_Client *ClientCallerSession) GetSeller(sellerId string) (SupplyChainContractSeller, error) {
	return _Client.Contract.GetSeller(&_Client.CallOpts, sellerId)
}

// GetSender is a free data retrieval call binding the contract method 0x5e01eb5a.
//
// Solidity: function getSender() view returns(address)
func (_Client *ClientCaller) GetSender(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "getSender")
	return *ret0, err
}

// GetSender is a free data retrieval call binding the contract method 0x5e01eb5a.
//
// Solidity: function getSender() view returns(address)
func (_Client *ClientSession) GetSender() (common.Address, error) {
	return _Client.Contract.GetSender(&_Client.CallOpts)
}

// GetSender is a free data retrieval call binding the contract method 0x5e01eb5a.
//
// Solidity: function getSender() view returns(address)
func (_Client *ClientCallerSession) GetSender() (common.Address, error) {
	return _Client.Contract.GetSender(&_Client.CallOpts)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Client *ClientCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "hasRole", role, account)
	return *ret0, err
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Client *ClientSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Client.Contract.HasRole(&_Client.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_Client *ClientCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _Client.Contract.HasRole(&_Client.CallOpts, role, account)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Client *ClientCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Client.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Client *ClientSession) Paused() (bool, error) {
	return _Client.Contract.Paused(&_Client.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Client *ClientCallerSession) Paused() (bool, error) {
	return _Client.Contract.Paused(&_Client.CallOpts)
}

// ApproveByBuyer is a paid mutator transaction binding the contract method 0x2c2339d3.
//
// Solidity: function approveByBuyer(string buyerId, string invoiceId) returns(bool success)
func (_Client *ClientTransactor) ApproveByBuyer(opts *bind.TransactOpts, buyerId string, invoiceId string) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "approveByBuyer", buyerId, invoiceId)
}

// ApproveByBuyer is a paid mutator transaction binding the contract method 0x2c2339d3.
//
// Solidity: function approveByBuyer(string buyerId, string invoiceId) returns(bool success)
func (_Client *ClientSession) ApproveByBuyer(buyerId string, invoiceId string) (*types.Transaction, error) {
	return _Client.Contract.ApproveByBuyer(&_Client.TransactOpts, buyerId, invoiceId)
}

// ApproveByBuyer is a paid mutator transaction binding the contract method 0x2c2339d3.
//
// Solidity: function approveByBuyer(string buyerId, string invoiceId) returns(bool success)
func (_Client *ClientTransactorSession) ApproveByBuyer(buyerId string, invoiceId string) (*types.Transaction, error) {
	return _Client.Contract.ApproveByBuyer(&_Client.TransactOpts, buyerId, invoiceId)
}

// ApproveBySeller is a paid mutator transaction binding the contract method 0x8130e8ed.
//
// Solidity: function approveBySeller(string sellerId, string invoiceId) returns(bool success)
func (_Client *ClientTransactor) ApproveBySeller(opts *bind.TransactOpts, sellerId string, invoiceId string) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "approveBySeller", sellerId, invoiceId)
}

// ApproveBySeller is a paid mutator transaction binding the contract method 0x8130e8ed.
//
// Solidity: function approveBySeller(string sellerId, string invoiceId) returns(bool success)
func (_Client *ClientSession) ApproveBySeller(sellerId string, invoiceId string) (*types.Transaction, error) {
	return _Client.Contract.ApproveBySeller(&_Client.TransactOpts, sellerId, invoiceId)
}

// ApproveBySeller is a paid mutator transaction binding the contract method 0x8130e8ed.
//
// Solidity: function approveBySeller(string sellerId, string invoiceId) returns(bool success)
func (_Client *ClientTransactorSession) ApproveBySeller(sellerId string, invoiceId string) (*types.Transaction, error) {
	return _Client.Contract.ApproveBySeller(&_Client.TransactOpts, sellerId, invoiceId)
}

// CreateInvoice is a paid mutator transaction binding the contract method 0x1378ded0.
//
// Solidity: function createInvoice(string id, string item, string unit, uint256 amount, uint256 amountPerUnit, string sellerId, string buyerId) returns(string invoiceId)
func (_Client *ClientTransactor) CreateInvoice(opts *bind.TransactOpts, id string, item string, unit string, amount *big.Int, amountPerUnit *big.Int, sellerId string, buyerId string) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "createInvoice", id, item, unit, amount, amountPerUnit, sellerId, buyerId)
}

// CreateInvoice is a paid mutator transaction binding the contract method 0x1378ded0.
//
// Solidity: function createInvoice(string id, string item, string unit, uint256 amount, uint256 amountPerUnit, string sellerId, string buyerId) returns(string invoiceId)
func (_Client *ClientSession) CreateInvoice(id string, item string, unit string, amount *big.Int, amountPerUnit *big.Int, sellerId string, buyerId string) (*types.Transaction, error) {
	return _Client.Contract.CreateInvoice(&_Client.TransactOpts, id, item, unit, amount, amountPerUnit, sellerId, buyerId)
}

// CreateInvoice is a paid mutator transaction binding the contract method 0x1378ded0.
//
// Solidity: function createInvoice(string id, string item, string unit, uint256 amount, uint256 amountPerUnit, string sellerId, string buyerId) returns(string invoiceId)
func (_Client *ClientTransactorSession) CreateInvoice(id string, item string, unit string, amount *big.Int, amountPerUnit *big.Int, sellerId string, buyerId string) (*types.Transaction, error) {
	return _Client.Contract.CreateInvoice(&_Client.TransactOpts, id, item, unit, amount, amountPerUnit, sellerId, buyerId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Client *ClientTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Client *ClientSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.Contract.GrantRole(&_Client.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_Client *ClientTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.Contract.GrantRole(&_Client.TransactOpts, role, account)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Client *ClientTransactor) Init(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "init")
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Client *ClientSession) Init() (*types.Transaction, error) {
	return _Client.Contract.Init(&_Client.TransactOpts)
}

// Init is a paid mutator transaction binding the contract method 0xe1c7392a.
//
// Solidity: function init() returns()
func (_Client *ClientTransactorSession) Init() (*types.Transaction, error) {
	return _Client.Contract.Init(&_Client.TransactOpts)
}

// RegisterBuyer is a paid mutator transaction binding the contract method 0x8ffd2411.
//
// Solidity: function registerBuyer(string buyerId, string name, string uid, string pan, string tan, string bankAccount) returns(string bId)
func (_Client *ClientTransactor) RegisterBuyer(opts *bind.TransactOpts, buyerId string, name string, uid string, pan string, tan string, bankAccount string) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "registerBuyer", buyerId, name, uid, pan, tan, bankAccount)
}

// RegisterBuyer is a paid mutator transaction binding the contract method 0x8ffd2411.
//
// Solidity: function registerBuyer(string buyerId, string name, string uid, string pan, string tan, string bankAccount) returns(string bId)
func (_Client *ClientSession) RegisterBuyer(buyerId string, name string, uid string, pan string, tan string, bankAccount string) (*types.Transaction, error) {
	return _Client.Contract.RegisterBuyer(&_Client.TransactOpts, buyerId, name, uid, pan, tan, bankAccount)
}

// RegisterBuyer is a paid mutator transaction binding the contract method 0x8ffd2411.
//
// Solidity: function registerBuyer(string buyerId, string name, string uid, string pan, string tan, string bankAccount) returns(string bId)
func (_Client *ClientTransactorSession) RegisterBuyer(buyerId string, name string, uid string, pan string, tan string, bankAccount string) (*types.Transaction, error) {
	return _Client.Contract.RegisterBuyer(&_Client.TransactOpts, buyerId, name, uid, pan, tan, bankAccount)
}

// RegisterSeller is a paid mutator transaction binding the contract method 0x7e8555ed.
//
// Solidity: function registerSeller(string sellerId, string name, string uid, string pan, string bankAccount) returns(string sId)
func (_Client *ClientTransactor) RegisterSeller(opts *bind.TransactOpts, sellerId string, name string, uid string, pan string, bankAccount string) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "registerSeller", sellerId, name, uid, pan, bankAccount)
}

// RegisterSeller is a paid mutator transaction binding the contract method 0x7e8555ed.
//
// Solidity: function registerSeller(string sellerId, string name, string uid, string pan, string bankAccount) returns(string sId)
func (_Client *ClientSession) RegisterSeller(sellerId string, name string, uid string, pan string, bankAccount string) (*types.Transaction, error) {
	return _Client.Contract.RegisterSeller(&_Client.TransactOpts, sellerId, name, uid, pan, bankAccount)
}

// RegisterSeller is a paid mutator transaction binding the contract method 0x7e8555ed.
//
// Solidity: function registerSeller(string sellerId, string name, string uid, string pan, string bankAccount) returns(string sId)
func (_Client *ClientTransactorSession) RegisterSeller(sellerId string, name string, uid string, pan string, bankAccount string) (*types.Transaction, error) {
	return _Client.Contract.RegisterSeller(&_Client.TransactOpts, sellerId, name, uid, pan, bankAccount)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Client *ClientTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Client *ClientSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.Contract.RenounceRole(&_Client.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_Client *ClientTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.Contract.RenounceRole(&_Client.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Client *ClientTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Client *ClientSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.Contract.RevokeRole(&_Client.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_Client *ClientTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _Client.Contract.RevokeRole(&_Client.TransactOpts, role, account)
}

// ClientBuyerAddedIterator is returned from FilterBuyerAdded and is used to iterate over the raw logs and unpacked data for BuyerAdded events raised by the Client contract.
type ClientBuyerAddedIterator struct {
	Event *ClientBuyerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientBuyerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientBuyerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientBuyerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientBuyerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientBuyerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientBuyerAdded represents a BuyerAdded event raised by the Client contract.
type ClientBuyerAdded struct {
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterBuyerAdded is a free log retrieval operation binding the contract event 0xa02f3df0d0f1c777036d971f90f2b342e5f8879472d31d1e8affe7af7e70e5e6.
//
// Solidity: event BuyerAdded(string id)
func (_Client *ClientFilterer) FilterBuyerAdded(opts *bind.FilterOpts) (*ClientBuyerAddedIterator, error) {

	logs, sub, err := _Client.contract.FilterLogs(opts, "BuyerAdded")
	if err != nil {
		return nil, err
	}
	return &ClientBuyerAddedIterator{contract: _Client.contract, event: "BuyerAdded", logs: logs, sub: sub}, nil
}

// WatchBuyerAdded is a free log subscription operation binding the contract event 0xa02f3df0d0f1c777036d971f90f2b342e5f8879472d31d1e8affe7af7e70e5e6.
//
// Solidity: event BuyerAdded(string id)
func (_Client *ClientFilterer) WatchBuyerAdded(opts *bind.WatchOpts, sink chan<- *ClientBuyerAdded) (event.Subscription, error) {

	logs, sub, err := _Client.contract.WatchLogs(opts, "BuyerAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientBuyerAdded)
				if err := _Client.contract.UnpackLog(event, "BuyerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBuyerAdded is a log parse operation binding the contract event 0xa02f3df0d0f1c777036d971f90f2b342e5f8879472d31d1e8affe7af7e70e5e6.
//
// Solidity: event BuyerAdded(string id)
func (_Client *ClientFilterer) ParseBuyerAdded(log types.Log) (*ClientBuyerAdded, error) {
	event := new(ClientBuyerAdded)
	if err := _Client.contract.UnpackLog(event, "BuyerAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientInvoiceApprovedIterator is returned from FilterInvoiceApproved and is used to iterate over the raw logs and unpacked data for InvoiceApproved events raised by the Client contract.
type ClientInvoiceApprovedIterator struct {
	Event *ClientInvoiceApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientInvoiceApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientInvoiceApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientInvoiceApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientInvoiceApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientInvoiceApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientInvoiceApproved represents a InvoiceApproved event raised by the Client contract.
type ClientInvoiceApproved struct {
	ApprovedBy string
	InvoiceId  string
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterInvoiceApproved is a free log retrieval operation binding the contract event 0xac9dd2880cd48342ef259f5ee4d387680bfb36fdde2cc9e7d489542853580192.
//
// Solidity: event InvoiceApproved(string approvedBy, string invoiceId)
func (_Client *ClientFilterer) FilterInvoiceApproved(opts *bind.FilterOpts) (*ClientInvoiceApprovedIterator, error) {

	logs, sub, err := _Client.contract.FilterLogs(opts, "InvoiceApproved")
	if err != nil {
		return nil, err
	}
	return &ClientInvoiceApprovedIterator{contract: _Client.contract, event: "InvoiceApproved", logs: logs, sub: sub}, nil
}

// WatchInvoiceApproved is a free log subscription operation binding the contract event 0xac9dd2880cd48342ef259f5ee4d387680bfb36fdde2cc9e7d489542853580192.
//
// Solidity: event InvoiceApproved(string approvedBy, string invoiceId)
func (_Client *ClientFilterer) WatchInvoiceApproved(opts *bind.WatchOpts, sink chan<- *ClientInvoiceApproved) (event.Subscription, error) {

	logs, sub, err := _Client.contract.WatchLogs(opts, "InvoiceApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientInvoiceApproved)
				if err := _Client.contract.UnpackLog(event, "InvoiceApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInvoiceApproved is a log parse operation binding the contract event 0xac9dd2880cd48342ef259f5ee4d387680bfb36fdde2cc9e7d489542853580192.
//
// Solidity: event InvoiceApproved(string approvedBy, string invoiceId)
func (_Client *ClientFilterer) ParseInvoiceApproved(log types.Log) (*ClientInvoiceApproved, error) {
	event := new(ClientInvoiceApproved)
	if err := _Client.contract.UnpackLog(event, "InvoiceApproved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientItemSoldIterator is returned from FilterItemSold and is used to iterate over the raw logs and unpacked data for ItemSold events raised by the Client contract.
type ClientItemSoldIterator struct {
	Event *ClientItemSold // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientItemSoldIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientItemSold)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientItemSold)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientItemSoldIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientItemSoldIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientItemSold represents a ItemSold event raised by the Client contract.
type ClientItemSold struct {
	SellerId  string
	BuyerId   string
	InvoiceId string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterItemSold is a free log retrieval operation binding the contract event 0xc18e13caa82804b8ecce2d9483f0afc4bb7a3cb524beb949ad7f67951c61317d.
//
// Solidity: event ItemSold(string sellerId, string buyerId, string invoiceId)
func (_Client *ClientFilterer) FilterItemSold(opts *bind.FilterOpts) (*ClientItemSoldIterator, error) {

	logs, sub, err := _Client.contract.FilterLogs(opts, "ItemSold")
	if err != nil {
		return nil, err
	}
	return &ClientItemSoldIterator{contract: _Client.contract, event: "ItemSold", logs: logs, sub: sub}, nil
}

// WatchItemSold is a free log subscription operation binding the contract event 0xc18e13caa82804b8ecce2d9483f0afc4bb7a3cb524beb949ad7f67951c61317d.
//
// Solidity: event ItemSold(string sellerId, string buyerId, string invoiceId)
func (_Client *ClientFilterer) WatchItemSold(opts *bind.WatchOpts, sink chan<- *ClientItemSold) (event.Subscription, error) {

	logs, sub, err := _Client.contract.WatchLogs(opts, "ItemSold")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientItemSold)
				if err := _Client.contract.UnpackLog(event, "ItemSold", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseItemSold is a log parse operation binding the contract event 0xc18e13caa82804b8ecce2d9483f0afc4bb7a3cb524beb949ad7f67951c61317d.
//
// Solidity: event ItemSold(string sellerId, string buyerId, string invoiceId)
func (_Client *ClientFilterer) ParseItemSold(log types.Log) (*ClientItemSold, error) {
	event := new(ClientItemSold)
	if err := _Client.contract.UnpackLog(event, "ItemSold", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Client contract.
type ClientPausedIterator struct {
	Event *ClientPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientPaused represents a Paused event raised by the Client contract.
type ClientPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Client *ClientFilterer) FilterPaused(opts *bind.FilterOpts) (*ClientPausedIterator, error) {

	logs, sub, err := _Client.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ClientPausedIterator{contract: _Client.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Client *ClientFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ClientPaused) (event.Subscription, error) {

	logs, sub, err := _Client.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientPaused)
				if err := _Client.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Client *ClientFilterer) ParsePaused(log types.Log) (*ClientPaused, error) {
	event := new(ClientPaused)
	if err := _Client.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the Client contract.
type ClientRoleGrantedIterator struct {
	Event *ClientRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientRoleGranted represents a RoleGranted event raised by the Client contract.
type ClientRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Client *ClientFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClientRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Client.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClientRoleGrantedIterator{contract: _Client.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Client *ClientFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *ClientRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Client.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientRoleGranted)
				if err := _Client.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_Client *ClientFilterer) ParseRoleGranted(log types.Log) (*ClientRoleGranted, error) {
	event := new(ClientRoleGranted)
	if err := _Client.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the Client contract.
type ClientRoleRevokedIterator struct {
	Event *ClientRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientRoleRevoked represents a RoleRevoked event raised by the Client contract.
type ClientRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Client *ClientFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*ClientRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Client.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &ClientRoleRevokedIterator{contract: _Client.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Client *ClientFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *ClientRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Client.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientRoleRevoked)
				if err := _Client.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_Client *ClientFilterer) ParseRoleRevoked(log types.Log) (*ClientRoleRevoked, error) {
	event := new(ClientRoleRevoked)
	if err := _Client.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientSellerAddedIterator is returned from FilterSellerAdded and is used to iterate over the raw logs and unpacked data for SellerAdded events raised by the Client contract.
type ClientSellerAddedIterator struct {
	Event *ClientSellerAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientSellerAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientSellerAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientSellerAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientSellerAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientSellerAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientSellerAdded represents a SellerAdded event raised by the Client contract.
type ClientSellerAdded struct {
	Id  string
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSellerAdded is a free log retrieval operation binding the contract event 0x27ef2ec2576aa5285afcdaa46aed87b61e647f2feaa83e71d202942014ede1fc.
//
// Solidity: event SellerAdded(string id)
func (_Client *ClientFilterer) FilterSellerAdded(opts *bind.FilterOpts) (*ClientSellerAddedIterator, error) {

	logs, sub, err := _Client.contract.FilterLogs(opts, "SellerAdded")
	if err != nil {
		return nil, err
	}
	return &ClientSellerAddedIterator{contract: _Client.contract, event: "SellerAdded", logs: logs, sub: sub}, nil
}

// WatchSellerAdded is a free log subscription operation binding the contract event 0x27ef2ec2576aa5285afcdaa46aed87b61e647f2feaa83e71d202942014ede1fc.
//
// Solidity: event SellerAdded(string id)
func (_Client *ClientFilterer) WatchSellerAdded(opts *bind.WatchOpts, sink chan<- *ClientSellerAdded) (event.Subscription, error) {

	logs, sub, err := _Client.contract.WatchLogs(opts, "SellerAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientSellerAdded)
				if err := _Client.contract.UnpackLog(event, "SellerAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSellerAdded is a log parse operation binding the contract event 0x27ef2ec2576aa5285afcdaa46aed87b61e647f2feaa83e71d202942014ede1fc.
//
// Solidity: event SellerAdded(string id)
func (_Client *ClientFilterer) ParseSellerAdded(log types.Log) (*ClientSellerAdded, error) {
	event := new(ClientSellerAdded)
	if err := _Client.contract.UnpackLog(event, "SellerAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ClientUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Client contract.
type ClientUnpausedIterator struct {
	Event *ClientUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ClientUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ClientUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ClientUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ClientUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ClientUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ClientUnpaused represents a Unpaused event raised by the Client contract.
type ClientUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Client *ClientFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ClientUnpausedIterator, error) {

	logs, sub, err := _Client.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ClientUnpausedIterator{contract: _Client.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Client *ClientFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ClientUnpaused) (event.Subscription, error) {

	logs, sub, err := _Client.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ClientUnpaused)
				if err := _Client.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Client *ClientFilterer) ParseUnpaused(log types.Log) (*ClientUnpaused, error) {
	event := new(ClientUnpaused)
	if err := _Client.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}
